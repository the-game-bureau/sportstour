{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\sportstour\\\\bots\\\\saints-chatbot\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n\n// Main App component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to hold the chat history\n  const [chatHistory, setChatHistory] = useState([{\n    role: 'model',\n    parts: [{\n      text: \"Who Dat! I'm your go-to source for all things Saints. Ask me anything about the team's history, players, or big games. Let's talk some black and gold!\"\n    }]\n  }]);\n  // State for the current user input\n  const [userInput, setUserInput] = useState('');\n  // State to track if an API call is in progress\n  const [isLoading, setIsLoading] = useState(false);\n  // State for any API-related error messages\n  const [apiError, setApiError] = useState(null);\n\n  // A new line was added here.\n\n  // Ref to the chat container for automatic scrolling\n  const chatContainerRef = useRef(null);\n\n  // This useEffect hook handles the automatic scrolling to the bottom of the chat\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatHistory, apiError]);\n\n  // Function to send a message to the Gemini API\n  const handleSendMessage = async () => {\n    // Prevent sending empty messages or multiple requests at once\n    if (!userInput.trim() || isLoading) {\n      return;\n    }\n\n    // Capture the current user message and add it to the chat history\n    const userMessage = {\n      role: 'user',\n      parts: [{\n        text: userInput\n      }]\n    };\n    setChatHistory(prevChatHistory => [...prevChatHistory, userMessage]);\n    setUserInput(''); // Clear the input field\n    setApiError(null); // Reset any previous errors\n    setIsLoading(true); // Start loading animation\n\n    try {\n      // API call logic with exponential backoff for retries\n      const prompt = `You are a chatbot that is a New Orleans Saints superfan. Your persona is enthusiastic and knowledgeable. Respond to user queries about the Saints team's history, players, and big games. User asks: ${userInput}`;\n      const payload = {\n        contents: [{\n          role: \"user\",\n          parts: [{\n            text: prompt\n          }]\n        }]\n      };\n\n      // IMPORTANT: The API key has been replaced with the new placeholder.\n      const apiKey = \"AIzaSyCjYVpRM2pUYkmaP6-My3oU36D93T7SJkI\";\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n      let response;\n      let retries = 0;\n      const maxRetries = 5;\n      const baseDelay = 1000;\n      while (retries < maxRetries) {\n        try {\n          response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n          });\n          if (response.ok) {\n            break; // Success, exit the loop\n          } else {\n            retries++;\n            const delay = baseDelay * 2 ** retries;\n            await new Promise(res => setTimeout(res, delay));\n          }\n        } catch (error) {\n          retries++;\n          const delay = baseDelay * 2 ** retries;\n          await new Promise(res => setTimeout(res, delay));\n        }\n      }\n      if (!response.ok) {\n        throw new Error(`Failed to get a response from the API after multiple retries.`);\n      }\n      const result = await response.json();\n\n      // Process the API response and add it to chat history\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        const text = result.candidates[0].content.parts[0].text;\n        const botMessage = {\n          role: 'model',\n          parts: [{\n            text\n          }]\n        };\n        setChatHistory(prevChatHistory => [...prevChatHistory, botMessage]);\n      } else {\n        throw new Error('Unexpected API response format.');\n      }\n    } catch (error) {\n      console.error('Error generating content:', error);\n      setApiError(\"My apologies, there was an issue. Please try again.\");\n    } finally {\n      setIsLoading(false); // Stop loading animation\n    }\n  };\n\n  // UI for the chatbot using a plain, Swiss design-inspired aesthetic\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chatContainerRef,\n      children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.parts[0].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), apiError && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: apiError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && handleSendMessage(),\n          placeholder: \"Ask me about the Saints...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: isLoading,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"l5crtFimk8cuywn7htE3aMGc4us=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","chatHistory","setChatHistory","role","parts","text","userInput","setUserInput","isLoading","setIsLoading","apiError","setApiError","chatContainerRef","current","scrollTop","scrollHeight","handleSendMessage","trim","userMessage","prevChatHistory","prompt","payload","contents","apiKey","apiUrl","response","retries","maxRetries","baseDelay","fetch","method","headers","body","JSON","stringify","ok","delay","Promise","res","setTimeout","error","Error","result","json","candidates","length","content","botMessage","console","children","ref","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyDown","key","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/code/sportstour/bots/saints-chatbot/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Main App component\r\nconst App = () => {\r\n  // State to hold the chat history\r\n  const [chatHistory, setChatHistory] = useState([\r\n    { role: 'model', parts: [{ text: \"Who Dat! I'm your go-to source for all things Saints. Ask me anything about the team's history, players, or big games. Let's talk some black and gold!\" }] }\r\n  ]);\r\n  // State for the current user input\r\n  const [userInput, setUserInput] = useState('');\r\n  // State to track if an API call is in progress\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // State for any API-related error messages\r\n  const [apiError, setApiError] = useState(null);\r\n\r\n  // A new line was added here.\r\n\r\n  // Ref to the chat container for automatic scrolling\r\n  const chatContainerRef = useRef(null);\r\n\r\n  // This useEffect hook handles the automatic scrolling to the bottom of the chat\r\n  useEffect(() => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }\r\n  }, [chatHistory, apiError]);\r\n\r\n  // Function to send a message to the Gemini API\r\n  const handleSendMessage = async () => {\r\n    // Prevent sending empty messages or multiple requests at once\r\n    if (!userInput.trim() || isLoading) {\r\n      return;\r\n    }\r\n\r\n    // Capture the current user message and add it to the chat history\r\n    const userMessage = { role: 'user', parts: [{ text: userInput }] };\r\n    setChatHistory(prevChatHistory => [...prevChatHistory, userMessage]);\r\n    setUserInput(''); // Clear the input field\r\n    setApiError(null); // Reset any previous errors\r\n    setIsLoading(true); // Start loading animation\r\n\r\n    try {\r\n      // API call logic with exponential backoff for retries\r\n      const prompt = `You are a chatbot that is a New Orleans Saints superfan. Your persona is enthusiastic and knowledgeable. Respond to user queries about the Saints team's history, players, and big games. User asks: ${userInput}`;\r\n      \r\n      const payload = {\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }],\r\n      };\r\n      \r\n      // IMPORTANT: The API key has been replaced with the new placeholder.\r\n      const apiKey = \"AIzaSyCjYVpRM2pUYkmaP6-My3oU36D93T7SJkI\";\r\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n\r\n      let response;\r\n      let retries = 0;\r\n      const maxRetries = 5;\r\n      const baseDelay = 1000;\r\n\r\n      while (retries < maxRetries) {\r\n        try {\r\n          response = await fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n          });\r\n          if (response.ok) {\r\n            break; // Success, exit the loop\r\n          } else {\r\n            retries++;\r\n            const delay = baseDelay * (2 ** retries);\r\n            await new Promise(res => setTimeout(res, delay));\r\n          }\r\n        } catch (error) {\r\n          retries++;\r\n          const delay = baseDelay * (2 ** retries);\r\n          await new Promise(res => setTimeout(res, delay));\r\n        }\r\n      }\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to get a response from the API after multiple retries.`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      // Process the API response and add it to chat history\r\n      if (result.candidates && result.candidates.length > 0 &&\r\n          result.candidates[0].content && result.candidates[0].content.parts &&\r\n          result.candidates[0].content.parts.length > 0) {\r\n        const text = result.candidates[0].content.parts[0].text;\r\n        const botMessage = { role: 'model', parts: [{ text }] };\r\n        setChatHistory(prevChatHistory => [...prevChatHistory, botMessage]);\r\n      } else {\r\n        throw new Error('Unexpected API response format.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating content:', error);\r\n      setApiError(\"My apologies, there was an issue. Please try again.\");\r\n    } finally {\r\n      setIsLoading(false); // Stop loading animation\r\n    }\r\n  };\r\n\r\n  // UI for the chatbot using a plain, Swiss design-inspired aesthetic\r\n  return (\r\n    <div>\r\n      {/* Chat container, which is the main scrollable area */}\r\n      <div \r\n        ref={chatContainerRef} \r\n      >\r\n        {chatHistory.map((message, index) => (\r\n          <div\r\n            key={index}\r\n          >\r\n            <div>\r\n              <p>{message.parts[0].text}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {/* Loading indicator */}\r\n        {isLoading && (\r\n          <div>\r\n            <div>\r\n              <span>...</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* Error message display */}\r\n        {apiError && (\r\n          <div>\r\n            <div>\r\n              <p>{apiError}</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Input area at the bottom of the screen */}\r\n      <div>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n            placeholder=\"Ask me about the Saints...\"\r\n            disabled={isLoading}\r\n          />\r\n          <button\r\n            onClick={handleSendMessage}\r\n            disabled={isLoading}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}