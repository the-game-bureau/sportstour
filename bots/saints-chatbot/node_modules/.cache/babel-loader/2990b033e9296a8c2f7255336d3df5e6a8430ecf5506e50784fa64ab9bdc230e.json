{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\sportstour\\\\bots\\\\saints-chatbot\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Main App component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to hold the chat history\n  const [chatHistory, setChatHistory] = useState([{\n    role: 'model',\n    parts: [{\n      text: \"Who Dat! I'm your go-to source for all things Saints. Ask me anything about the team's history, players, or big games. Let's talk some black and gold!\"\n    }]\n  }]);\n  // State to hold the current user input\n  const [userInput, setUserInput] = useState('');\n  // State to track if an API call is in progress\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Function to handle sending a new message\n  const handleSendMessage = async () => {\n    // If the input is empty or we're already loading, do nothing\n    if (!userInput.trim() || isLoading) return;\n\n    // Add the user's message to the chat history\n    const newUserMessage = {\n      role: 'user',\n      parts: [{\n        text: userInput\n      }]\n    };\n    setChatHistory(prevChatHistory => [...prevChatHistory, newUserMessage]);\n\n    // Clear the input field and set loading state to true\n    setUserInput('');\n    setIsLoading(true);\n    try {\n      // The prompt for the API call will include the user's query\n      const prompt = `You are a chatbot that is a New Orleans Saints superfan. Your persona is enthusiastic and knowledgeable. Respond to user queries about the Saints team's history, players, and big games. User asks: ${userInput}`;\n\n      // Prepare the payload for the Gemini API\n      const payload = {\n        contents: [{\n          role: \"user\",\n          parts: [{\n            text: prompt\n          }]\n        }]\n      };\n\n      // API key is handled by the environment, leave as is\n      const apiKey = \"AIzaSyCjYVpRM2pUYkmaP6-My3oU36D93T7SJkI\";\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n\n      // Make the API call with exponential backoff for retries\n      let response;\n      let retries = 0;\n      const maxRetries = 5;\n      const baseDelay = 1000; // 1 second\n\n      while (retries < maxRetries) {\n        try {\n          console.log(`Attempting API call #${retries + 1}...`);\n          response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n          });\n          if (response.ok) {\n            console.log(\"API call successful!\");\n            break; // Success, exit the loop\n          } else {\n            console.error(`API call failed with status: ${response.status} - ${response.statusText}`);\n            retries++;\n            const delay = baseDelay * 2 ** retries;\n            console.log(`Retrying in ${delay}ms...`);\n            await new Promise(res => setTimeout(res, delay));\n          }\n        } catch (error) {\n          console.error('Fetch error during API call:', error);\n          retries++;\n          const delay = baseDelay * 2 ** retries;\n          console.log(`Retrying in ${delay}ms...`);\n          await new Promise(res => setTimeout(res, delay));\n        }\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to get a response from the API after multiple retries.\");\n      }\n      const result = await response.json();\n\n      // Check if the response contains valid content\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        const text = result.candidates[0].content.parts[0].text;\n        // Add the model's response to the chat history\n        setChatHistory(prevChatHistory => [...prevChatHistory, {\n          role: 'model',\n          parts: [{\n            text\n          }]\n        }]);\n      } else {\n        // Handle unexpected response format\n        throw new Error('Unexpected API response format.');\n      }\n    } catch (error) {\n      console.error('Error generating content:', error);\n      // Add a friendly error message to the chat\n      setChatHistory(prevChatHistory => [...prevChatHistory, {\n        role: 'model',\n        parts: [{\n          text: \"My apologies, there was an issue connecting to the servers. Please give it another try!\"\n        }]\n      }]);\n    } finally {\n      // Set loading state back to false\n      setIsLoading(false);\n    }\n  };\n\n  // UI for the chatbot\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-gray-100 font-inter antialiased\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto p-4 space-y-4 max-w-2xl mx-auto w-full\",\n      children: [chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-3 rounded-lg max-w-sm ${message.role === 'user' ? 'bg-blue-600 text-white rounded-br-none' : 'bg-white text-gray-800 rounded-bl-none shadow-sm'}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.parts[0].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white text-gray-800 p-3 rounded-lg max-w-sm shadow-sm rounded-bl-none\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"animate-pulse\",\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-white border-t border-gray-200 shadow-lg sticky bottom-0 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center max-w-2xl mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && handleSendMessage(),\n          className: \"flex-1 p-3 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-600 transition-colors\",\n          placeholder: \"Ask me about the Saints...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"p-3 bg-blue-600 text-white rounded-r-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400\",\n          disabled: isLoading,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"q6uRNZHmSlIbPTzHo6uIdHTUMK4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","chatHistory","setChatHistory","role","parts","text","userInput","setUserInput","isLoading","setIsLoading","handleSendMessage","trim","newUserMessage","prevChatHistory","prompt","payload","contents","apiKey","apiUrl","response","retries","maxRetries","baseDelay","console","log","fetch","method","headers","body","JSON","stringify","ok","error","status","statusText","delay","Promise","res","setTimeout","Error","result","json","candidates","length","content","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyDown","key","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/code/sportstour/bots/saints-chatbot/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Main App component\r\nconst App = () => {\r\n  // State to hold the chat history\r\n  const [chatHistory, setChatHistory] = useState([\r\n    { role: 'model', parts: [{ text: \"Who Dat! I'm your go-to source for all things Saints. Ask me anything about the team's history, players, or big games. Let's talk some black and gold!\" }] }\r\n  ]);\r\n  // State to hold the current user input\r\n  const [userInput, setUserInput] = useState('');\r\n  // State to track if an API call is in progress\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Function to handle sending a new message\r\n  const handleSendMessage = async () => {\r\n    // If the input is empty or we're already loading, do nothing\r\n    if (!userInput.trim() || isLoading) return;\r\n\r\n    // Add the user's message to the chat history\r\n    const newUserMessage = { role: 'user', parts: [{ text: userInput }] };\r\n    setChatHistory(prevChatHistory => [...prevChatHistory, newUserMessage]);\r\n    \r\n    // Clear the input field and set loading state to true\r\n    setUserInput('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // The prompt for the API call will include the user's query\r\n      const prompt = `You are a chatbot that is a New Orleans Saints superfan. Your persona is enthusiastic and knowledgeable. Respond to user queries about the Saints team's history, players, and big games. User asks: ${userInput}`;\r\n      \r\n      // Prepare the payload for the Gemini API\r\n      const payload = {\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }],\r\n      };\r\n      \r\n      // API key is handled by the environment, leave as is\r\n      const apiKey = \"AIzaSyCjYVpRM2pUYkmaP6-My3oU36D93T7SJkI\";\r\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n\r\n      // Make the API call with exponential backoff for retries\r\n      let response;\r\n      let retries = 0;\r\n      const maxRetries = 5;\r\n      const baseDelay = 1000; // 1 second\r\n\r\n      while (retries < maxRetries) {\r\n        try {\r\n          console.log(`Attempting API call #${retries + 1}...`);\r\n          response = await fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n          });\r\n          if (response.ok) {\r\n            console.log(\"API call successful!\");\r\n            break; // Success, exit the loop\r\n          } else {\r\n            console.error(`API call failed with status: ${response.status} - ${response.statusText}`);\r\n            retries++;\r\n            const delay = baseDelay * (2 ** retries);\r\n            console.log(`Retrying in ${delay}ms...`);\r\n            await new Promise(res => setTimeout(res, delay));\r\n          }\r\n        } catch (error) {\r\n          console.error('Fetch error during API call:', error);\r\n          retries++;\r\n          const delay = baseDelay * (2 ** retries);\r\n          console.log(`Retrying in ${delay}ms...`);\r\n          await new Promise(res => setTimeout(res, delay));\r\n        }\r\n      }\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to get a response from the API after multiple retries.\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      // Check if the response contains valid content\r\n      if (result.candidates && result.candidates.length > 0 &&\r\n          result.candidates[0].content && result.candidates[0].content.parts &&\r\n          result.candidates[0].content.parts.length > 0) {\r\n        const text = result.candidates[0].content.parts[0].text;\r\n        // Add the model's response to the chat history\r\n        setChatHistory(prevChatHistory => [...prevChatHistory, { role: 'model', parts: [{ text }] }]);\r\n      } else {\r\n        // Handle unexpected response format\r\n        throw new Error('Unexpected API response format.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating content:', error);\r\n      // Add a friendly error message to the chat\r\n      setChatHistory(prevChatHistory => [...prevChatHistory, { role: 'model', parts: [{ text: \"My apologies, there was an issue connecting to the servers. Please give it another try!\" }] }]);\r\n    } finally {\r\n      // Set loading state back to false\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // UI for the chatbot\r\n  return (\r\n    <div className=\"flex flex-col h-screen bg-gray-100 font-inter antialiased\">\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 max-w-2xl mx-auto w-full\">\r\n        {chatHistory.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\r\n          >\r\n            <div\r\n              className={`p-3 rounded-lg max-w-sm ${\r\n                message.role === 'user'\r\n                  ? 'bg-blue-600 text-white rounded-br-none'\r\n                  : 'bg-white text-gray-800 rounded-bl-none shadow-sm'\r\n              }`}\r\n            >\r\n              <p>{message.parts[0].text}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {isLoading && (\r\n          <div className=\"flex justify-start\">\r\n            <div className=\"bg-white text-gray-800 p-3 rounded-lg max-w-sm shadow-sm rounded-bl-none\">\r\n              <span className=\"animate-pulse\">...</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"p-4 bg-white border-t border-gray-200 shadow-lg sticky bottom-0 w-full\">\r\n        <div className=\"flex items-center max-w-2xl mx-auto\">\r\n          <input\r\n            type=\"text\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n            className=\"flex-1 p-3 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-600 transition-colors\"\r\n            placeholder=\"Ask me about the Saints...\"\r\n            disabled={isLoading}\r\n          />\r\n          <button\r\n            onClick={handleSendMessage}\r\n            className=\"p-3 bg-blue-600 text-white rounded-r-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\r\n            disabled={isLoading}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}